// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file data-fetcher-service.proto (package rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message rpc.TestConnectionRequest
 */
export class TestConnectionRequest extends Message<TestConnectionRequest> {
  /**
   * @generated from field: double foo = 1;
   */
  foo = 0;

  constructor(data?: PartialMessage<TestConnectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.TestConnectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "foo", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestConnectionRequest {
    return new TestConnectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestConnectionRequest {
    return new TestConnectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestConnectionRequest {
    return new TestConnectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestConnectionRequest | PlainMessage<TestConnectionRequest> | undefined, b: TestConnectionRequest | PlainMessage<TestConnectionRequest> | undefined): boolean {
    return proto3.util.equals(TestConnectionRequest, a, b);
  }
}

/**
 * @generated from message rpc.TestConnectionResponse
 */
export class TestConnectionResponse extends Message<TestConnectionResponse> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok = false;

  constructor(data?: PartialMessage<TestConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.TestConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestConnectionResponse {
    return new TestConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestConnectionResponse {
    return new TestConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestConnectionResponse {
    return new TestConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestConnectionResponse | PlainMessage<TestConnectionResponse> | undefined, b: TestConnectionResponse | PlainMessage<TestConnectionResponse> | undefined): boolean {
    return proto3.util.equals(TestConnectionResponse, a, b);
  }
}

