// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file post.proto (package rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Comment, Location, User } from "./general_pb.js";

/**
 * @generated from message rpc.Post
 */
export class Post extends Message<Post> {
  /**
   * @generated from field: string postId = 1;
   */
  postId = "";

  /**
   * @generated from field: rpc.User author = 3;
   */
  author?: User;

  /**
   * @generated from field: string content = 4;
   */
  content = "";

  /**
   * @generated from field: bytes pictureChunk = 5;
   */
  pictureChunk = new Uint8Array(0);

  /**
   * @generated from field: rpc.Location location = 6;
   */
  location?: Location;

  /**
   * @generated from field: int64 likes = 7;
   */
  likes = protoInt64.zero;

  /**
   * @generated from field: int64 bookmarks = 8;
   */
  bookmarks = protoInt64.zero;

  /**
   * @generated from field: repeated rpc.Comment comments = 9;
   */
  comments: Comment[] = [];

  /**
   * @generated from field: repeated string tags = 10;
   */
  tags: string[] = [];

  /**
   * @generated from field: int64 createdAt = 11;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: int64 updatedAt = 12;
   */
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<Post>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.Post";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "author", kind: "message", T: User },
    { no: 4, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pictureChunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "location", kind: "message", T: Location },
    { no: 7, name: "likes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "bookmarks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "comments", kind: "message", T: Comment, repeated: true },
    { no: 10, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "createdAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "updatedAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Post {
    return new Post().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Post {
    return new Post().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Post {
    return new Post().fromJsonString(jsonString, options);
  }

  static equals(a: Post | PlainMessage<Post> | undefined, b: Post | PlainMessage<Post> | undefined): boolean {
    return proto3.util.equals(Post, a, b);
  }
}

/**
 * @generated from message rpc.GetPostsByLocationRequest
 */
export class GetPostsByLocationRequest extends Message<GetPostsByLocationRequest> {
  /**
   * @generated from field: rpc.Location location = 1;
   */
  location?: Location;

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * @generated from field: int64 radius = 3;
   */
  radius = protoInt64.zero;

  constructor(data?: PartialMessage<GetPostsByLocationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetPostsByLocationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "message", T: Location },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "radius", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsByLocationRequest {
    return new GetPostsByLocationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsByLocationRequest {
    return new GetPostsByLocationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsByLocationRequest {
    return new GetPostsByLocationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsByLocationRequest | PlainMessage<GetPostsByLocationRequest> | undefined, b: GetPostsByLocationRequest | PlainMessage<GetPostsByLocationRequest> | undefined): boolean {
    return proto3.util.equals(GetPostsByLocationRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetPostsByLocationResponse
 */
export class GetPostsByLocationResponse extends Message<GetPostsByLocationResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Post posts = 3;
   */
  posts: Post[] = [];

  constructor(data?: PartialMessage<GetPostsByLocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetPostsByLocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "posts", kind: "message", T: Post, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsByLocationResponse {
    return new GetPostsByLocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsByLocationResponse {
    return new GetPostsByLocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsByLocationResponse {
    return new GetPostsByLocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsByLocationResponse | PlainMessage<GetPostsByLocationResponse> | undefined, b: GetPostsByLocationResponse | PlainMessage<GetPostsByLocationResponse> | undefined): boolean {
    return proto3.util.equals(GetPostsByLocationResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetPostsByPostIdsRequest
 */
export class GetPostsByPostIdsRequest extends Message<GetPostsByPostIdsRequest> {
  /**
   * @generated from field: repeated string postIds = 1;
   */
  postIds: string[] = [];

  constructor(data?: PartialMessage<GetPostsByPostIdsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetPostsByPostIdsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "postIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsByPostIdsRequest {
    return new GetPostsByPostIdsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsByPostIdsRequest {
    return new GetPostsByPostIdsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsByPostIdsRequest {
    return new GetPostsByPostIdsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsByPostIdsRequest | PlainMessage<GetPostsByPostIdsRequest> | undefined, b: GetPostsByPostIdsRequest | PlainMessage<GetPostsByPostIdsRequest> | undefined): boolean {
    return proto3.util.equals(GetPostsByPostIdsRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetPostsByPostIdsResponse
 */
export class GetPostsByPostIdsResponse extends Message<GetPostsByPostIdsResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Post posts = 3;
   */
  posts: Post[] = [];

  constructor(data?: PartialMessage<GetPostsByPostIdsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetPostsByPostIdsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "posts", kind: "message", T: Post, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsByPostIdsResponse {
    return new GetPostsByPostIdsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsByPostIdsResponse {
    return new GetPostsByPostIdsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsByPostIdsResponse {
    return new GetPostsByPostIdsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsByPostIdsResponse | PlainMessage<GetPostsByPostIdsResponse> | undefined, b: GetPostsByPostIdsResponse | PlainMessage<GetPostsByPostIdsResponse> | undefined): boolean {
    return proto3.util.equals(GetPostsByPostIdsResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetPostsByUserIdRequest
 */
export class GetPostsByUserIdRequest extends Message<GetPostsByUserIdRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<GetPostsByUserIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetPostsByUserIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsByUserIdRequest {
    return new GetPostsByUserIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsByUserIdRequest {
    return new GetPostsByUserIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsByUserIdRequest {
    return new GetPostsByUserIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsByUserIdRequest | PlainMessage<GetPostsByUserIdRequest> | undefined, b: GetPostsByUserIdRequest | PlainMessage<GetPostsByUserIdRequest> | undefined): boolean {
    return proto3.util.equals(GetPostsByUserIdRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetPostsByUserIdResponse
 */
export class GetPostsByUserIdResponse extends Message<GetPostsByUserIdResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Post posts = 3;
   */
  posts: Post[] = [];

  constructor(data?: PartialMessage<GetPostsByUserIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetPostsByUserIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "posts", kind: "message", T: Post, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsByUserIdResponse {
    return new GetPostsByUserIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsByUserIdResponse {
    return new GetPostsByUserIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsByUserIdResponse {
    return new GetPostsByUserIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsByUserIdResponse | PlainMessage<GetPostsByUserIdResponse> | undefined, b: GetPostsByUserIdResponse | PlainMessage<GetPostsByUserIdResponse> | undefined): boolean {
    return proto3.util.equals(GetPostsByUserIdResponse, a, b);
  }
}

/**
 * TODO: nuxt.js cannot 'use server' right?
 * or, can next.js use 'use server' to execute server function with user input?
 * or, we need something like grpc-web to communicate with data service? look at the poor support of grpc for es6 javascript!
 * or, connectgrpc has some good things?
 * and the gateway is needed for auth or something. How to design the gateway to prevent ddos attack?
 * or, we need a microservice to recieve RESTful request and then do rpc with data service?
 * if we need provide api for developers, is RESTful APIs a must for better use?
 *
 * @generated from message rpc.AddPostRequest
 */
export class AddPostRequest extends Message<AddPostRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: bytes pictureChunk = 2;
   */
  pictureChunk = new Uint8Array(0);

  /**
   * @generated from field: rpc.Location location = 3;
   */
  location?: Location;

  /**
   * @generated from field: string content = 4;
   */
  content = "";

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<AddPostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddPostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pictureChunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "location", kind: "message", T: Location },
    { no: 4, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddPostRequest {
    return new AddPostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddPostRequest {
    return new AddPostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddPostRequest {
    return new AddPostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddPostRequest | PlainMessage<AddPostRequest> | undefined, b: AddPostRequest | PlainMessage<AddPostRequest> | undefined): boolean {
    return proto3.util.equals(AddPostRequest, a, b);
  }
}

/**
 * @generated from message rpc.AddPostResponse
 */
export class AddPostResponse extends Message<AddPostResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: string postId = 3;
   */
  postId = "";

  /**
   * @generated from field: repeated string pictureLinks = 4;
   */
  pictureLinks: string[] = [];

  constructor(data?: PartialMessage<AddPostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddPostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pictureLinks", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddPostResponse {
    return new AddPostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddPostResponse {
    return new AddPostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddPostResponse {
    return new AddPostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddPostResponse | PlainMessage<AddPostResponse> | undefined, b: AddPostResponse | PlainMessage<AddPostResponse> | undefined): boolean {
    return proto3.util.equals(AddPostResponse, a, b);
  }
}

/**
 * @generated from message rpc.RemovePostRequest
 */
export class RemovePostRequest extends Message<RemovePostRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  constructor(data?: PartialMessage<RemovePostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemovePostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemovePostRequest {
    return new RemovePostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemovePostRequest {
    return new RemovePostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemovePostRequest {
    return new RemovePostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemovePostRequest | PlainMessage<RemovePostRequest> | undefined, b: RemovePostRequest | PlainMessage<RemovePostRequest> | undefined): boolean {
    return proto3.util.equals(RemovePostRequest, a, b);
  }
}

/**
 * @generated from message rpc.RemovePostResponse
 */
export class RemovePostResponse extends Message<RemovePostResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<RemovePostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemovePostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemovePostResponse {
    return new RemovePostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemovePostResponse {
    return new RemovePostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemovePostResponse {
    return new RemovePostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemovePostResponse | PlainMessage<RemovePostResponse> | undefined, b: RemovePostResponse | PlainMessage<RemovePostResponse> | undefined): boolean {
    return proto3.util.equals(RemovePostResponse, a, b);
  }
}

/**
 * @generated from message rpc.AddLikeRequest
 */
export class AddLikeRequest extends Message<AddLikeRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  constructor(data?: PartialMessage<AddLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddLikeRequest {
    return new AddLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddLikeRequest {
    return new AddLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddLikeRequest {
    return new AddLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddLikeRequest | PlainMessage<AddLikeRequest> | undefined, b: AddLikeRequest | PlainMessage<AddLikeRequest> | undefined): boolean {
    return proto3.util.equals(AddLikeRequest, a, b);
  }
}

/**
 * @generated from message rpc.AddLikeResponse
 */
export class AddLikeResponse extends Message<AddLikeResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<AddLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddLikeResponse {
    return new AddLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddLikeResponse {
    return new AddLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddLikeResponse {
    return new AddLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddLikeResponse | PlainMessage<AddLikeResponse> | undefined, b: AddLikeResponse | PlainMessage<AddLikeResponse> | undefined): boolean {
    return proto3.util.equals(AddLikeResponse, a, b);
  }
}

/**
 * @generated from message rpc.RemoveLikeRequest
 */
export class RemoveLikeRequest extends Message<RemoveLikeRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  constructor(data?: PartialMessage<RemoveLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemoveLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveLikeRequest {
    return new RemoveLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveLikeRequest {
    return new RemoveLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveLikeRequest {
    return new RemoveLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveLikeRequest | PlainMessage<RemoveLikeRequest> | undefined, b: RemoveLikeRequest | PlainMessage<RemoveLikeRequest> | undefined): boolean {
    return proto3.util.equals(RemoveLikeRequest, a, b);
  }
}

/**
 * @generated from message rpc.RemoveLikeResponse
 */
export class RemoveLikeResponse extends Message<RemoveLikeResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<RemoveLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemoveLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveLikeResponse {
    return new RemoveLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveLikeResponse {
    return new RemoveLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveLikeResponse {
    return new RemoveLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveLikeResponse | PlainMessage<RemoveLikeResponse> | undefined, b: RemoveLikeResponse | PlainMessage<RemoveLikeResponse> | undefined): boolean {
    return proto3.util.equals(RemoveLikeResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetLikesRequest
 */
export class GetLikesRequest extends Message<GetLikesRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetLikesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetLikesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikesRequest {
    return new GetLikesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikesRequest {
    return new GetLikesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikesRequest {
    return new GetLikesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikesRequest | PlainMessage<GetLikesRequest> | undefined, b: GetLikesRequest | PlainMessage<GetLikesRequest> | undefined): boolean {
    return proto3.util.equals(GetLikesRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetLikesResponse
 */
export class GetLikesResponse extends Message<GetLikesResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Post posts = 3;
   */
  posts: Post[] = [];

  constructor(data?: PartialMessage<GetLikesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetLikesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "posts", kind: "message", T: Post, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikesResponse {
    return new GetLikesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikesResponse {
    return new GetLikesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikesResponse {
    return new GetLikesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikesResponse | PlainMessage<GetLikesResponse> | undefined, b: GetLikesResponse | PlainMessage<GetLikesResponse> | undefined): boolean {
    return proto3.util.equals(GetLikesResponse, a, b);
  }
}

/**
 * @generated from message rpc.AddBookmarkRequest
 */
export class AddBookmarkRequest extends Message<AddBookmarkRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  constructor(data?: PartialMessage<AddBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBookmarkRequest {
    return new AddBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBookmarkRequest {
    return new AddBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBookmarkRequest {
    return new AddBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddBookmarkRequest | PlainMessage<AddBookmarkRequest> | undefined, b: AddBookmarkRequest | PlainMessage<AddBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(AddBookmarkRequest, a, b);
  }
}

/**
 * @generated from message rpc.AddBookmarkResponse
 */
export class AddBookmarkResponse extends Message<AddBookmarkResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<AddBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBookmarkResponse {
    return new AddBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBookmarkResponse {
    return new AddBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBookmarkResponse {
    return new AddBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddBookmarkResponse | PlainMessage<AddBookmarkResponse> | undefined, b: AddBookmarkResponse | PlainMessage<AddBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(AddBookmarkResponse, a, b);
  }
}

/**
 * @generated from message rpc.RemoveBookmarkRequest
 */
export class RemoveBookmarkRequest extends Message<RemoveBookmarkRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  constructor(data?: PartialMessage<RemoveBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemoveBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveBookmarkRequest {
    return new RemoveBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveBookmarkRequest {
    return new RemoveBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveBookmarkRequest {
    return new RemoveBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveBookmarkRequest | PlainMessage<RemoveBookmarkRequest> | undefined, b: RemoveBookmarkRequest | PlainMessage<RemoveBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(RemoveBookmarkRequest, a, b);
  }
}

/**
 * @generated from message rpc.RemoveBookmarkResponse
 */
export class RemoveBookmarkResponse extends Message<RemoveBookmarkResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<RemoveBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemoveBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveBookmarkResponse {
    return new RemoveBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveBookmarkResponse {
    return new RemoveBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveBookmarkResponse {
    return new RemoveBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveBookmarkResponse | PlainMessage<RemoveBookmarkResponse> | undefined, b: RemoveBookmarkResponse | PlainMessage<RemoveBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(RemoveBookmarkResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetBookmarksRequest
 */
export class GetBookmarksRequest extends Message<GetBookmarksRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetBookmarksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetBookmarksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookmarksRequest {
    return new GetBookmarksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookmarksRequest {
    return new GetBookmarksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookmarksRequest {
    return new GetBookmarksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookmarksRequest | PlainMessage<GetBookmarksRequest> | undefined, b: GetBookmarksRequest | PlainMessage<GetBookmarksRequest> | undefined): boolean {
    return proto3.util.equals(GetBookmarksRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetBookmarksResponse
 */
export class GetBookmarksResponse extends Message<GetBookmarksResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Post posts = 3;
   */
  posts: Post[] = [];

  constructor(data?: PartialMessage<GetBookmarksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetBookmarksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "posts", kind: "message", T: Post, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookmarksResponse {
    return new GetBookmarksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookmarksResponse {
    return new GetBookmarksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookmarksResponse {
    return new GetBookmarksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookmarksResponse | PlainMessage<GetBookmarksResponse> | undefined, b: GetBookmarksResponse | PlainMessage<GetBookmarksResponse> | undefined): boolean {
    return proto3.util.equals(GetBookmarksResponse, a, b);
  }
}

/**
 * @generated from message rpc.AddCommentRequest
 */
export class AddCommentRequest extends Message<AddCommentRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<AddCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCommentRequest {
    return new AddCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCommentRequest {
    return new AddCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCommentRequest {
    return new AddCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddCommentRequest | PlainMessage<AddCommentRequest> | undefined, b: AddCommentRequest | PlainMessage<AddCommentRequest> | undefined): boolean {
    return proto3.util.equals(AddCommentRequest, a, b);
  }
}

/**
 * @generated from message rpc.AddCommentResponse
 */
export class AddCommentResponse extends Message<AddCommentResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: string commentId = 3;
   */
  commentId = "";

  constructor(data?: PartialMessage<AddCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCommentResponse {
    return new AddCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCommentResponse {
    return new AddCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCommentResponse {
    return new AddCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddCommentResponse | PlainMessage<AddCommentResponse> | undefined, b: AddCommentResponse | PlainMessage<AddCommentResponse> | undefined): boolean {
    return proto3.util.equals(AddCommentResponse, a, b);
  }
}

/**
 * @generated from message rpc.RemoveCommentRequest
 */
export class RemoveCommentRequest extends Message<RemoveCommentRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  /**
   * @generated from field: string commentId = 3;
   */
  commentId = "";

  constructor(data?: PartialMessage<RemoveCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemoveCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveCommentRequest {
    return new RemoveCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveCommentRequest {
    return new RemoveCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveCommentRequest {
    return new RemoveCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveCommentRequest | PlainMessage<RemoveCommentRequest> | undefined, b: RemoveCommentRequest | PlainMessage<RemoveCommentRequest> | undefined): boolean {
    return proto3.util.equals(RemoveCommentRequest, a, b);
  }
}

/**
 * @generated from message rpc.RemoveCommentResponse
 */
export class RemoveCommentResponse extends Message<RemoveCommentResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<RemoveCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.RemoveCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveCommentResponse {
    return new RemoveCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveCommentResponse {
    return new RemoveCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveCommentResponse {
    return new RemoveCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveCommentResponse | PlainMessage<RemoveCommentResponse> | undefined, b: RemoveCommentResponse | PlainMessage<RemoveCommentResponse> | undefined): boolean {
    return proto3.util.equals(RemoveCommentResponse, a, b);
  }
}

