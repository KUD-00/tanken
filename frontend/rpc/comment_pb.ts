// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file comment.proto (package rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Comment } from "./general_pb.js";

/**
 * @generated from message rpc.AddCommentRequest
 */
export class AddCommentRequest extends Message<AddCommentRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<AddCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCommentRequest {
    return new AddCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCommentRequest {
    return new AddCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCommentRequest {
    return new AddCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddCommentRequest | PlainMessage<AddCommentRequest> | undefined, b: AddCommentRequest | PlainMessage<AddCommentRequest> | undefined): boolean {
    return proto3.util.equals(AddCommentRequest, a, b);
  }
}

/**
 * @generated from message rpc.AddCommentResponse
 */
export class AddCommentResponse extends Message<AddCommentResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: string commentId = 3;
   */
  commentId = "";

  constructor(data?: PartialMessage<AddCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.AddCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCommentResponse {
    return new AddCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCommentResponse {
    return new AddCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCommentResponse {
    return new AddCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddCommentResponse | PlainMessage<AddCommentResponse> | undefined, b: AddCommentResponse | PlainMessage<AddCommentResponse> | undefined): boolean {
    return proto3.util.equals(AddCommentResponse, a, b);
  }
}

/**
 * @generated from message rpc.HardDeleteCommentRequest
 */
export class HardDeleteCommentRequest extends Message<HardDeleteCommentRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  /**
   * @generated from field: string commentId = 3;
   */
  commentId = "";

  constructor(data?: PartialMessage<HardDeleteCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.HardDeleteCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HardDeleteCommentRequest {
    return new HardDeleteCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HardDeleteCommentRequest {
    return new HardDeleteCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HardDeleteCommentRequest {
    return new HardDeleteCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HardDeleteCommentRequest | PlainMessage<HardDeleteCommentRequest> | undefined, b: HardDeleteCommentRequest | PlainMessage<HardDeleteCommentRequest> | undefined): boolean {
    return proto3.util.equals(HardDeleteCommentRequest, a, b);
  }
}

/**
 * @generated from message rpc.HardDeleteCommentResponse
 */
export class HardDeleteCommentResponse extends Message<HardDeleteCommentResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<HardDeleteCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.HardDeleteCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HardDeleteCommentResponse {
    return new HardDeleteCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HardDeleteCommentResponse {
    return new HardDeleteCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HardDeleteCommentResponse {
    return new HardDeleteCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HardDeleteCommentResponse | PlainMessage<HardDeleteCommentResponse> | undefined, b: HardDeleteCommentResponse | PlainMessage<HardDeleteCommentResponse> | undefined): boolean {
    return proto3.util.equals(HardDeleteCommentResponse, a, b);
  }
}

/**
 * @generated from message rpc.SoftDeleteCommentRequest
 */
export class SoftDeleteCommentRequest extends Message<SoftDeleteCommentRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  /**
   * @generated from field: string commentId = 3;
   */
  commentId = "";

  constructor(data?: PartialMessage<SoftDeleteCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.SoftDeleteCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SoftDeleteCommentRequest {
    return new SoftDeleteCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SoftDeleteCommentRequest {
    return new SoftDeleteCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SoftDeleteCommentRequest {
    return new SoftDeleteCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SoftDeleteCommentRequest | PlainMessage<SoftDeleteCommentRequest> | undefined, b: SoftDeleteCommentRequest | PlainMessage<SoftDeleteCommentRequest> | undefined): boolean {
    return proto3.util.equals(SoftDeleteCommentRequest, a, b);
  }
}

/**
 * @generated from message rpc.SoftDeleteCommentResponse
 */
export class SoftDeleteCommentResponse extends Message<SoftDeleteCommentResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<SoftDeleteCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.SoftDeleteCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SoftDeleteCommentResponse {
    return new SoftDeleteCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SoftDeleteCommentResponse {
    return new SoftDeleteCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SoftDeleteCommentResponse {
    return new SoftDeleteCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SoftDeleteCommentResponse | PlainMessage<SoftDeleteCommentResponse> | undefined, b: SoftDeleteCommentResponse | PlainMessage<SoftDeleteCommentResponse> | undefined): boolean {
    return proto3.util.equals(SoftDeleteCommentResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetCommentsByCommentIdsRequest
 */
export class GetCommentsByCommentIdsRequest extends Message<GetCommentsByCommentIdsRequest> {
  /**
   * @generated from field: repeated string commentId = 1;
   */
  commentId: string[] = [];

  constructor(data?: PartialMessage<GetCommentsByCommentIdsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetCommentsByCommentIdsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsByCommentIdsRequest {
    return new GetCommentsByCommentIdsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsByCommentIdsRequest {
    return new GetCommentsByCommentIdsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsByCommentIdsRequest {
    return new GetCommentsByCommentIdsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsByCommentIdsRequest | PlainMessage<GetCommentsByCommentIdsRequest> | undefined, b: GetCommentsByCommentIdsRequest | PlainMessage<GetCommentsByCommentIdsRequest> | undefined): boolean {
    return proto3.util.equals(GetCommentsByCommentIdsRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetCommentsByCommentIdsResponse
 */
export class GetCommentsByCommentIdsResponse extends Message<GetCommentsByCommentIdsResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Comment comment = 3;
   */
  comment: Comment[] = [];

  constructor(data?: PartialMessage<GetCommentsByCommentIdsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetCommentsByCommentIdsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comment", kind: "message", T: Comment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsByCommentIdsResponse {
    return new GetCommentsByCommentIdsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsByCommentIdsResponse {
    return new GetCommentsByCommentIdsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsByCommentIdsResponse {
    return new GetCommentsByCommentIdsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsByCommentIdsResponse | PlainMessage<GetCommentsByCommentIdsResponse> | undefined, b: GetCommentsByCommentIdsResponse | PlainMessage<GetCommentsByCommentIdsResponse> | undefined): boolean {
    return proto3.util.equals(GetCommentsByCommentIdsResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetCommentsByPostIdRequest
 */
export class GetCommentsByPostIdRequest extends Message<GetCommentsByPostIdRequest> {
  /**
   * @generated from field: string postId = 1;
   */
  postId = "";

  constructor(data?: PartialMessage<GetCommentsByPostIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetCommentsByPostIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsByPostIdRequest {
    return new GetCommentsByPostIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsByPostIdRequest {
    return new GetCommentsByPostIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsByPostIdRequest {
    return new GetCommentsByPostIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsByPostIdRequest | PlainMessage<GetCommentsByPostIdRequest> | undefined, b: GetCommentsByPostIdRequest | PlainMessage<GetCommentsByPostIdRequest> | undefined): boolean {
    return proto3.util.equals(GetCommentsByPostIdRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetCommentsByPostIdResponse
 */
export class GetCommentsByPostIdResponse extends Message<GetCommentsByPostIdResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: repeated rpc.Comment comments = 3;
   */
  comments: Comment[] = [];

  constructor(data?: PartialMessage<GetCommentsByPostIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetCommentsByPostIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comments", kind: "message", T: Comment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsByPostIdResponse {
    return new GetCommentsByPostIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsByPostIdResponse {
    return new GetCommentsByPostIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsByPostIdResponse {
    return new GetCommentsByPostIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsByPostIdResponse | PlainMessage<GetCommentsByPostIdResponse> | undefined, b: GetCommentsByPostIdResponse | PlainMessage<GetCommentsByPostIdResponse> | undefined): boolean {
    return proto3.util.equals(GetCommentsByPostIdResponse, a, b);
  }
}

/**
 * @generated from message rpc.UpdateCommentRequest
 */
export class UpdateCommentRequest extends Message<UpdateCommentRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string commentId = 2;
   */
  commentId = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<UpdateCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.UpdateCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCommentRequest {
    return new UpdateCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCommentRequest {
    return new UpdateCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCommentRequest {
    return new UpdateCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCommentRequest | PlainMessage<UpdateCommentRequest> | undefined, b: UpdateCommentRequest | PlainMessage<UpdateCommentRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCommentRequest, a, b);
  }
}

/**
 * @generated from message rpc.UpdateCommentResponse
 */
export class UpdateCommentResponse extends Message<UpdateCommentResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<UpdateCommentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.UpdateCommentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCommentResponse {
    return new UpdateCommentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCommentResponse {
    return new UpdateCommentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCommentResponse {
    return new UpdateCommentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCommentResponse | PlainMessage<UpdateCommentResponse> | undefined, b: UpdateCommentResponse | PlainMessage<UpdateCommentResponse> | undefined): boolean {
    return proto3.util.equals(UpdateCommentResponse, a, b);
  }
}

