// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file monitor.proto (package rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message rpc.WriteBackCacheRequest
 */
export class WriteBackCacheRequest extends Message<WriteBackCacheRequest> {
  /**
   * @generated from field: double usage = 1;
   */
  usage = 0;

  constructor(data?: PartialMessage<WriteBackCacheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.WriteBackCacheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteBackCacheRequest {
    return new WriteBackCacheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteBackCacheRequest {
    return new WriteBackCacheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteBackCacheRequest {
    return new WriteBackCacheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteBackCacheRequest | PlainMessage<WriteBackCacheRequest> | undefined, b: WriteBackCacheRequest | PlainMessage<WriteBackCacheRequest> | undefined): boolean {
    return proto3.util.equals(WriteBackCacheRequest, a, b);
  }
}

/**
 * @generated from message rpc.WriteBackCacheResponse
 */
export class WriteBackCacheResponse extends Message<WriteBackCacheResponse> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok = false;

  constructor(data?: PartialMessage<WriteBackCacheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.WriteBackCacheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteBackCacheResponse {
    return new WriteBackCacheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteBackCacheResponse {
    return new WriteBackCacheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteBackCacheResponse {
    return new WriteBackCacheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteBackCacheResponse | PlainMessage<WriteBackCacheResponse> | undefined, b: WriteBackCacheResponse | PlainMessage<WriteBackCacheResponse> | undefined): boolean {
    return proto3.util.equals(WriteBackCacheResponse, a, b);
  }
}

