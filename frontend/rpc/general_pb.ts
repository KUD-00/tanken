//TODO: imports act weird, need to fix

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file general.proto (package rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message rpc.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * @generated from field: string commentId = 1;
   */
  commentId = "";

  /**
   * @generated from field: string postId = 2;
   */
  postId = "";

  /**
   * @generated from field: int64 createdAt = 3;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: int64 updatedAt = 4;
   */
  updatedAt = protoInt64.zero;

  /**
   * @generated from field: rpc.User user = 5;
   */
  user?: User;

  /**
   * @generated from field: string content = 6;
   */
  content = "";

  /**
   * @generated from field: int64 likes = 7;
   */
  likes = protoInt64.zero;

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "postId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "createdAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "updatedAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "user", kind: "message", T: User },
    { no: 6, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "likes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

/**
 * @generated from message rpc.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: string userName = 2;
   */
  userName = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string provider = 4;
   */
  provider = "";

  /**
   * @generated from field: string profilePictureLink = 5;
   */
  profilePictureLink = "";

  /**
   * @generated from field: string bio = 6;
   */
  bio = "";

  /**
   * @generated from field: int64 subscribed = 7;
   */
  subscribed = protoInt64.zero;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "profilePictureLink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "subscribed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message rpc.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: double longitude = 1;
   */
  longitude = 0;

  /**
   * @generated from field: double latitude = 2;
   */
  latitude = 0;

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

