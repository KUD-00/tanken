// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file user.proto (package rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { User } from "./general_pb.js";

/**
 * @generated from message rpc.SignUpUserRequest
 */
export class SignUpUserRequest extends Message<SignUpUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string provider = 3;
   */
  provider = "";

  /**
   * @generated from field: string bio = 4;
   */
  bio = "";

  /**
   * @generated from field: string profilePictureLink = 5;
   */
  profilePictureLink = "";

  constructor(data?: PartialMessage<SignUpUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.SignUpUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "profilePictureLink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpUserRequest {
    return new SignUpUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpUserRequest {
    return new SignUpUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpUserRequest {
    return new SignUpUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpUserRequest | PlainMessage<SignUpUserRequest> | undefined, b: SignUpUserRequest | PlainMessage<SignUpUserRequest> | undefined): boolean {
    return proto3.util.equals(SignUpUserRequest, a, b);
  }
}

/**
 * @generated from message rpc.SignUpUserResponse
 */
export class SignUpUserResponse extends Message<SignUpUserResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: string userId = 3;
   */
  userId = "";

  constructor(data?: PartialMessage<SignUpUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.SignUpUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpUserResponse {
    return new SignUpUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpUserResponse {
    return new SignUpUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpUserResponse {
    return new SignUpUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpUserResponse | PlainMessage<SignUpUserResponse> | undefined, b: SignUpUserResponse | PlainMessage<SignUpUserResponse> | undefined): boolean {
    return proto3.util.equals(SignUpUserResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetUserInfoRequest
 */
export class GetUserInfoRequest extends Message<GetUserInfoRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetUserInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoRequest | PlainMessage<GetUserInfoRequest> | undefined, b: GetUserInfoRequest | PlainMessage<GetUserInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetUserInfoRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetUserInfoResponse
 */
export class GetUserInfoResponse extends Message<GetUserInfoResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: rpc.User user = 3;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetUserInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoResponse | PlainMessage<GetUserInfoResponse> | undefined, b: GetUserInfoResponse | PlainMessage<GetUserInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetUserInfoResponse, a, b);
  }
}

/**
 * @generated from message rpc.SoftDeleteUserRequest
 */
export class SoftDeleteUserRequest extends Message<SoftDeleteUserRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<SoftDeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.SoftDeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SoftDeleteUserRequest {
    return new SoftDeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SoftDeleteUserRequest {
    return new SoftDeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SoftDeleteUserRequest {
    return new SoftDeleteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SoftDeleteUserRequest | PlainMessage<SoftDeleteUserRequest> | undefined, b: SoftDeleteUserRequest | PlainMessage<SoftDeleteUserRequest> | undefined): boolean {
    return proto3.util.equals(SoftDeleteUserRequest, a, b);
  }
}

/**
 * @generated from message rpc.SoftDeleteUserResponse
 */
export class SoftDeleteUserResponse extends Message<SoftDeleteUserResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<SoftDeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.SoftDeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SoftDeleteUserResponse {
    return new SoftDeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SoftDeleteUserResponse {
    return new SoftDeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SoftDeleteUserResponse {
    return new SoftDeleteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SoftDeleteUserResponse | PlainMessage<SoftDeleteUserResponse> | undefined, b: SoftDeleteUserResponse | PlainMessage<SoftDeleteUserResponse> | undefined): boolean {
    return proto3.util.equals(SoftDeleteUserResponse, a, b);
  }
}

/**
 * @generated from message rpc.HardDeleteUserRequest
 */
export class HardDeleteUserRequest extends Message<HardDeleteUserRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<HardDeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.HardDeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HardDeleteUserRequest {
    return new HardDeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HardDeleteUserRequest {
    return new HardDeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HardDeleteUserRequest {
    return new HardDeleteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HardDeleteUserRequest | PlainMessage<HardDeleteUserRequest> | undefined, b: HardDeleteUserRequest | PlainMessage<HardDeleteUserRequest> | undefined): boolean {
    return proto3.util.equals(HardDeleteUserRequest, a, b);
  }
}

/**
 * @generated from message rpc.HardDeleteUserResponse
 */
export class HardDeleteUserResponse extends Message<HardDeleteUserResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<HardDeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.HardDeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HardDeleteUserResponse {
    return new HardDeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HardDeleteUserResponse {
    return new HardDeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HardDeleteUserResponse {
    return new HardDeleteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HardDeleteUserResponse | PlainMessage<HardDeleteUserResponse> | undefined, b: HardDeleteUserResponse | PlainMessage<HardDeleteUserResponse> | undefined): boolean {
    return proto3.util.equals(HardDeleteUserResponse, a, b);
  }
}

/**
 * @generated from message rpc.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string bio = 3;
   */
  bio?: string;

  /**
   * @generated from field: optional string profilePictureLink = 4;
   */
  profilePictureLink?: string;

  /**
   * @generated from field: optional int64 subscribed = 5;
   */
  subscribed?: bigint;

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "profilePictureLink", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "subscribed", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * @generated from message rpc.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<UpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.UpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined, b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserResponse, a, b);
  }
}

/**
 * @generated from message rpc.GetUserInfoByOAuthRequest
 */
export class GetUserInfoByOAuthRequest extends Message<GetUserInfoByOAuthRequest> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<GetUserInfoByOAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetUserInfoByOAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoByOAuthRequest {
    return new GetUserInfoByOAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoByOAuthRequest {
    return new GetUserInfoByOAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoByOAuthRequest {
    return new GetUserInfoByOAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoByOAuthRequest | PlainMessage<GetUserInfoByOAuthRequest> | undefined, b: GetUserInfoByOAuthRequest | PlainMessage<GetUserInfoByOAuthRequest> | undefined): boolean {
    return proto3.util.equals(GetUserInfoByOAuthRequest, a, b);
  }
}

/**
 * @generated from message rpc.GetUserInfoByOAuthResponse
 */
export class GetUserInfoByOAuthResponse extends Message<GetUserInfoByOAuthResponse> {
  /**
   * @generated from field: int64 ok = 1;
   */
  ok = protoInt64.zero;

  /**
   * @generated from field: string msg = 2;
   */
  msg = "";

  /**
   * @generated from field: rpc.User user = 3;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserInfoByOAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rpc.GetUserInfoByOAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoByOAuthResponse {
    return new GetUserInfoByOAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoByOAuthResponse {
    return new GetUserInfoByOAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoByOAuthResponse {
    return new GetUserInfoByOAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoByOAuthResponse | PlainMessage<GetUserInfoByOAuthResponse> | undefined, b: GetUserInfoByOAuthResponse | PlainMessage<GetUserInfoByOAuthResponse> | undefined): boolean {
    return proto3.util.equals(GetUserInfoByOAuthResponse, a, b);
  }
}

